name: CI Workflow

on:
  push:
    branches: [ "master" ]
    paths:
      - '.github/release.json' # 当release.json变化时触发workflow

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ env.VERSION }}
      code: ${{ env.CODE }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
      previous_tag: ${{ steps.get_previous_tag.outputs.previous_tag }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tags

      - name: Extract version information
        id: get_version_info
        run: |
          echo "CODE=$(jq -r '.code' < .github/release.json)" >> $GITHUB_ENV
          echo "VERSION=$(jq -r '.version' < .github/release.json)" >> $GITHUB_ENV

      # 获取上一个 tag
      - name: Get previous tag
        id: get_previous_tag
        run: |
          PREV_TAG=$(git tag --sort=-v:refname | grep -v "v${{ env.VERSION }}" | head -n 1 | sed 's/^v//' || echo "0.0.1")
          echo "previous_tag=${PREV_TAG}" >> $GITHUB_OUTPUT
          echo "Found previous tag (without v): ${PREV_TAG}"

      - name: Create Release Tag
        run: git tag v${{ env.VERSION }}

      - name: Push Tag
        run: git push origin v${{ env.VERSION }}

      - name: Create Release Draft
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: v${{ env.VERSION }}
          draft: true
          body: |
            [View changes on GitHub](https://github.com/ohdj/NfcAimeReader/compare/v${{ steps.get_previous_tag.outputs.previous_tag }}...v${{ env.VERSION }})

  linux-build-android:
    needs: prepare-release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Set version from prepare job
        run: |
          echo "VERSION=${{ needs.prepare-release.outputs.version }}" >> $GITHUB_ENV
          echo "PREVIOUS_TAG=${{ needs.prepare-release.outputs.previous_tag }}" >> $GITHUB_ENV

      - name: Generate signing.properties
        working-directory: NfcAimeReader.Android
        run: |
          ${{ secrets.BASH_DOWNLOAD_JKS }}
          echo "KEYSTORE_FILE = ${{ github.workspace }}/NfcAimeReader.Android/keystore.jks" > app/signing.properties
          echo "KEYSTORE_PASSWORD = ${{ secrets.KEYSTORE_PASSWORD }}" >> app/signing.properties
          echo "KEY_ALIAS = ${{ secrets.KEY_ALIAS }}" >> app/signing.properties
          echo "KEY_PASSWORD = ${{ secrets.KEY_PASSWORD }}" >> app/signing.properties
          cat app/signing.properties

      - name: Grant execute permission for gradlew
        working-directory: NfcAimeReader.Android
        run: chmod +x gradlew

      - name: Build with Gradle
        working-directory: NfcAimeReader.Android
        run: ./gradlew assembleRelease

      - name: Rename APK
        working-directory: NfcAimeReader.Android
        run: mv app/build/outputs/apk/release/app-release.apk ${{ github.workspace }}/NfcAimeReader_v${{ env.VERSION }}.apk

      - name: Calculate APK hash (MD5 and SHA1)
        id: apk_hash
        run: |
          echo "MD5=$(md5sum NfcAimeReader_v${{ env.VERSION }}.apk | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "SHA1=$(sha1sum NfcAimeReader_v${{ env.VERSION }}.apk | awk '{ print $1 }')" >> $GITHUB_ENV

      # First get the release by tag name
      - name: Get Release Info
        id: get_release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tagName = 'v${{ env.VERSION }}';
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const release = releases.data.find(r => r.tag_name === tagName);
            if (!release) {
              throw new Error(`Release with tag ${tagName} not found`);
            }
            
            return release.id;
          result-encoding: string

      - name: Update Release Description
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const releaseId = ${{ steps.get_release.outputs.result }};
            const version = process.env.VERSION;
            const md5 = process.env.MD5;
            const sha1 = process.env.SHA1;
            const previousTag = process.env.PREVIOUS_TAG;

            const currentRelease = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId
            });

            const checksumInfo = `### Checksum
            | File | NfcAimeReader_v${version}.apk |
            | ---- | ------------------------------------ |
            | MD5 | ${md5} |
            | SHA1 | ${sha1} |

            [View changes on GitHub](https://github.com/ohdj/NfcAimeReader/compare/v${previousTag}...v${version})`;

            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              body: checksumInfo
            });

      - name: Upload APK
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare-release.outputs.upload_url }}
          asset_path: ./NfcAimeReader_v${{ env.VERSION }}.apk
          asset_name: NfcAimeReader_v${{ env.VERSION }}.apk
          asset_content_type: application/vnd.android.package-archive

  windows-build-dll:
    needs: prepare-release
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set version from prepare job
        shell: pwsh
        run: |
          echo "VERSION=${{ needs.prepare-release.outputs.version }}" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Build and Publish .NET Project
        run: dotnet publish -c Release -r win-x64 -p:Version=${{ env.VERSION }} NfcAimeReaderDLL/NfcAimeReaderDLL.csproj

      - name: Upload DLL to Release Draft
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare-release.outputs.upload_url }}
          asset_path: NfcAimeReaderDLL/bin/Release/net9.0/win-x64/publish/NfcAimeReaderDLL.dll
          asset_name: aimeio_nfcreader_v${{ env.VERSION }}.dll
          asset_content_type: application/octet-stream
